---
title: "Data Science Final"
format: pdf
---
```{r, echo = FALSE}
library(RSocrata)
library(tidyverse)
library(stringr)
library(lubridate)
library(sf)
library(dplyr)
library(ggplot2)
library(patchwork)
library(readxl)
```


## Water point data
The following code chunk uses an API call to download water point data for Bangladesh. The data comes from the Water Point Data Exchange (WPdx) project, which standardizes water point data collected by project stakeholders. The data is then filtered to only include water points in Cox's Bazar, and is later mapped and classified accoridng to the water point's status (Functional, Non-functional, and Non-functional during the dry season). 
```{r}
#Downloading the data 
df <- read.socrata(
  "https://data.waterpointdata.org/resource/eqje-vguj.json?country_id=BGD",
  app_token = "PjQJU7Ifj1RWCnOXDj8EZtswc",
  email     = "kaf121@georgetown.edu",
  password  = "El3vator!"
)

#Filtering the data
filtered_df <- df %>%
  filter(!is.na(lat_deg), !is.na(lon_deg)) %>%
  filter(clean_adm2 == "Cox'S Bazar")

filtered_df <- st_as_sf(filtered_df, coords = c("lon_deg", "lat_deg"), remove = FALSE) %>%
  st_set_crs(value = 4326)

#Ploting the map:
ggplot() +
  geom_sf(data = filtered_df, aes(color = status_clean)) +
  labs(
    color = "Water point status",
    title = "Water point distribution across Cox's Bazar") +
  theme_minimal()
```


## Administrative division data
The following code chunk loads, filters and plots Subnational Administrative Boundaries for Bangladesh. The data comes from the Bangladesh Data Grid, maintained by The Humanitarian Data Exchange (HDX). The HDX is a USAID-funded and OCHE-run open data platform designed to facilitate sharing of data relevant to development and humanitarian contexts. The specified dataset is available [here](https://data.humdata.org/dataset/401d3fae-4262-48c9-891f-461fd776d49b/resource/08736818-ae72-44a9-abd6-a51915c24921/download/bgd_adm_bbs_20201113_shp.zip), and must be downloaded prior to running the code. To ensure the code runs correctly, use the bgd_admbnda_adm4_bbs_20201113.shp file from the download folder.
```{r}
# Load the districts shapefile
districts <- st_read("bgd_adm_bbs_20201113_SHP/bgd_admbnda_adm4_bbs_20201113.shp")

# Filter the data
filtered_districts <- districts %>%
  filter(ADM2_EN == "Cox's Bazar")

#Plot the map:
ggplot() +
  geom_sf(data = filtered_districts, aes(color = ADM3_EN)) +
  labs(
    color = "Name of Upazila",
    title = "Administrative sub-divisions (Upazilas) in Cox's Bazar") +
  theme_minimal()
```

## Downloading refuge camp data
The following code chunk loads and plots geographical boundaries for refugee camps in Cox's Bazar. The data also comes from the Bangladesh Data Grid maintained by HDX.The specified dataset is available [here](https://data.humdata.org/dataset/outline-of-camps-sites-of-rohingya-refugees-in-cox-s-bazar-bangladesh?), and must be downloaded prior to running the code. The data is available at the camp level, the camp block level, and the camp sub-block level. To ensure the code runs correctly, use the 20230412_Camp Boundaries_A1, A2, A3.gdb file from the download folder.

```{r}

camp_data <- st_read("20230412_Camp Boundaries_A1, A2, A3.gdb")

camp_layers <- st_layers(dsn = "20230412_Camp Boundaries_A1, A2, A3.gdb")

camp_outlines <- st_read("20230412_Camp Boundaries_A1, A2, A3.gdb", "T20230412_A1_Camp_Outlines")

camp_block_outlines <- st_read("20230412_Camp Boundaries_A1, A2, A3.gdb", "T20230412_A2_Camp_Block_Outlines")

camp_sub_block_outlines <- st_read("20230412_Camp Boundaries_A1, A2, A3.gdb", "T20230412_A3_Camp_SubBlock_Outlines")

#Plot the map:
ggplot() +
  geom_sf(data = camp_outlines, aes(color = CampName)) +
  labs(
    color = "Camp Name",
    title = "Refugee camps in Cox's Bazar") +
  theme_minimal()

```


## Focusing on specific camp regions (Ukhia and Teknaf)
The following code chunks are mapping specific two camp areas to make better visualizations.
Furthermore, incorporating refugee population with density, it made easy to see which camp block has more densed refugee population

```{r}

# Please download the popluation data from below link first!!
# https://data.unhcr.org/en/documents/details/105303

# Read only necessary columns in the Excel file to merge population data matching with Block SSID column
refugee_data <- read_excel("UNHCR Population Factsheet  Block Level Data - November 2023.xlsx", range = "A6:H1000") %>%
  select(`Block SSID`, `Total Individuals`)

# Merge population with existing camp district data based on 'Block SSID'
merged_data <- camp_data %>%
  left_join(refugee_data, by = c("BlockSSID" = "Block SSID"))

# Filter camp_data to include only Camp district
Ukhia_data <- merged_data[merged_data$CentroidY > 21.15, ]
Teknaf_data <- merged_data[merged_data$CentroidY < 21, ]
Ukhia_wp_data <- filtered_df[filtered_df$lat_deg > 21.15 & filtered_df$lat_deg < 21.23, ]
Teknaf_wp_data <- filtered_df[filtered_df$lat_deg < 21 & filtered_df$lat_deg > 20.90, ]

# Convert 'Total Individuals' to numeric for Ukhia
Ukhia_data$`Total Individuals` <- as.numeric(Ukhia_data$`Total Individuals`)

# Plotting for Ukhia
ggplot() +
  geom_sf(data = Ukhia_data, aes(fill = `Total Individuals`)) +
  scale_fill_gradient(low = "lightgreen", high = "darkgreen", na.value = "grey", name = "Population Density") +
  theme_minimal() +
  labs(title = "Ukhia District Population Density Map")

# Plot the Ukhia Camp with Water point
ggplot() +
  geom_sf(data = Ukhia_data, aes(fill = `Total Individuals`)) +
  scale_fill_gradient(low = "lightgreen", high = "darkgreen", na.value = "grey", name = "Population Density") +
  theme_minimal() + 

  geom_sf(data = Ukhia_wp_data, aes(color = status_clean), size = 0.1) +
  scale_color_manual(values = c("Functional" = "yellow", "Non-Functional, dry season" = "orange", "Non-Functional" = "blue")) +
  labs(fill = "CampName", color = "Water point Status") +
  labs(title = "Ukhia District Population Density Map with water points")

# Convert 'Total Individuals' to numeric for Teknaf
Teknaf_data$`Total Individuals` <- as.numeric(Teknaf_data$`Total Individuals`)

# Plotting for Teknaf
ggplot() +
  geom_sf(data = Teknaf_data, aes(fill = `Total Individuals`)) +
  scale_fill_gradient(low = "lemonchiffon", high = "lemonchiffon4", na.value = "grey", name = "Population Density") +
  theme_minimal() +
  labs(title = "Teknaf District Population Density Map")

# Plot the Teknaf Camp with Water point
ggplot() +
  geom_sf(data = Teknaf_data, aes(fill = `Total Individuals`)) +
  scale_fill_gradient(low = "lemonchiffon", high = "lemonchiffon4", na.value = "grey", name = "Population Density") +
  theme_minimal() + 

  geom_sf(data = Teknaf_wp_data, aes(color = status_clean), size = 0.1) +
  scale_color_manual(values = c("Functional" = "green", "Non-Functional, dry season" = "orange", "Non-Functional" = "blue")) +
  labs(fill = "CampName", color = "Water point Status") +
  labs(title = "Teknaf District Population Density Map with water points")
```
Note: For more focused analysis, camp districts are manually divided cut by longitude and latitude

# Still working on Buffer
```{r}
#### Still working on Buffer #### 
Teknaf_data <- Teknaf_data %>% 
  st_transform(crs=3857)
# Create points from camp centers
camp_centers <- st_as_sf(Teknaf_data, coords = c("CentroidX", "CentroidY"))
# Using the conversion factor to create the buffer around the camp center point
camp_center_buffer <- st_buffer(camp_centers, dist = 100)
# Visualize the buffers around the camp center point
ggplot() +
  geom_sf(data = Teknaf_data, aes(fill = `Total Individuals`)) +
  geom_sf(data = camp_center_buffer, color = "red", fill = NA) +
  scale_fill_gradient(low = "lemonchiffon", high = "lemonchiffon4", na.value = "grey", name = "Population Density") +
  labs(x = "Longitude [degrees]", y = "Latitude [degrees]", title = "Water points within 100m of Camp centers") +
  theme_minimal()

```

## Combining the maps
The following code chunks combine previous visualizations, layering the water point data and refugee camp data over administrative divisions.
```{r}
# Combining the water point and district divisions maps
ggplot() +
  geom_sf(data = filtered_districts, aes(fill = ADM3_EN), color = "black") +
  scale_fill_discrete() +
  
  geom_sf(data = filtered_df, aes(color = status_clean)) +
  scale_color_manual(values = c("Functional" = "green", "Non-Functional, dry season" = "blue", "Non-Functional" = "orange")) +

  labs(fill = "Upazila", color = "Water point Status", title = "Water point distribution across Cox's Bazar")
```


```{r}
# Combining the refuge camps and district maps
ggplot() +
  geom_sf(data = filtered_districts, aes(fill = ADM3_EN), color = "black") +
  geom_sf(data = camp_outlines, fill = "transparent", color = "yellow") +
  scale_fill_discrete(name = "Upazila") +
  scale_color_manual(name = "Refugee camp outlines", values = "yellow") +

  labs(title = "Refugee camp boundaries across Cox's Bazar")
```

Note: layering administrative divisions, water point location, and refuge camp boundaries in the same plot is not possible because of overlapping geographical coordinates.

## Function: maps for different districts
The following code chunk contains a function that generates layered maps for water point data, refugee camp boundaries and administrative divisions. 
```{r}
plot_filtered_district <- function(district_filter, layer, water_point_filter, camp_outline_filter, Title, Level) {
  # Apply filters to the district and water point data
  new_filtered_districts <- dplyr::filter(filtered_districts, district_filter)
  new_filtered_df <- dplyr::filter(filtered_df, water_point_filter)
  new_filtered_camp_outlines <- dplyr::filter(camp_outlines, camp_outline_filter)
  
  # Plotting
  ggplot() +
    geom_sf(data = new_filtered_districts, aes(fill = !!as.name(layer)), color = "black") +
    geom_sf(data = new_filtered_df, aes(color = status_clean)) +
    scale_color_manual(values = c("Functional" = "green", "Non-Functional, dry season" = "blue", "Non-Functional" = "orange")) +
    geom_sf(data = new_filtered_camp_outlines, fill = "transparent", color = "yellow") +
    scale_fill_discrete(name = Level) +
    labs(
      color = "Water point Status",
      title = Title) +
    theme_minimal()
}
```

### Plots for different districts
The following code chunk uses the function described above to generate maps for the Ukhia and Teknaf Upazilas, since these administrative regions are the ones that contain both refugee camps and water points. 
```{r}
Ukhia <- plot_filtered_district(district_filter = filtered_districts$ADM3_EN == "Ukhia",
                                layer = "ADM3_EN",
                                water_point_filter = filtered_df$clean_adm3 == "Ukhia",
                                camp_outline_filter = camp_outlines$Upazila == "Ukhia",
                                "Ukhia Upazila",
                                "Upazila Name")


Teknarf <- plot_filtered_district(district_filter = filtered_districts$ADM3_EN == "Teknaf",
                                  layer = "ADM3_EN",
                                  water_point_filter = filtered_df$clean_adm3 == "Teknaf",
                                  camp_outline_filter = camp_outlines$Upazila == "Teknaf",
                                  "Teknaf Upazila",
                                  "Upazila Name")
Ukhia + Teknarf
```

### Plots for different districts including sub district breakdown
The following code chunk uses the same function as above but changes the layer argument to display further administrative sub-divisions. 
```{r}
Ukhia <- plot_filtered_district(district_filter = filtered_districts$ADM3_EN == "Ukhia",
                                layer = "ADM4_EN",
                                water_point_filter = filtered_df$clean_adm3 == "Ukhia",
                                camp_outline_filter = camp_outlines$Upazila == "Ukhia",
                                "Ukhia Upazila",
                                "Sub-division name")

Teknarf <- plot_filtered_district(district_filter = filtered_districts$ADM3_EN == "Teknaf",
                                  layer = "ADM4_EN",
                                  water_point_filter = filtered_df$clean_adm3 == "Teknaf",
                                  camp_outline_filter = camp_outlines$Upazila == "Teknaf",
                                  "Teknaf Upazila",
                                  "Sub-division name")

Ukhia + Teknarf
```

Based on the maps above, it is clear that there is still a lot of overlap between water points and refuge camps data. Because of this, it is necessary to disaggregate further, at the sub district level. The sub districts that will be selected for further visualizations are:

In Ukhia: Palong Khali

In Teknaf:  Whykong, Nhilla, Teknaf

These were selected because they are the sub-divisions with the largest presence of refugee camps and water points.


## Repeating preivous steps with further geospatial disagregation
The following code chunk contains a function that generates layered maps for water point data, refugee camp boundaries and administrative divisions at the sub-district level. The function is later used to generate plots for Palong Khali sub district located in Ukhia, and Whykong, Teknafm and Nhilla sub districts, located in Teknaf.
```{r}
subdistrict_plots <- function(district_name) {

# Filter the sub district data
filtered_subdist <- districts %>%
  filter(ADM4_EN == district_name)

  filtered_subdist_water <- filtered_df %>%
    filter(clean_adm4 == district_name)
  
  filtered_subdist_camps <- camp_outlines %>%
    filter(Union == district_name)

#Plot the sub district map:
ggplot() +
  geom_sf(data = filtered_subdist, aes(color = ADM4_EN))+
  geom_sf(data = filtered_subdist_water, aes(color = status_clean)) +
  scale_color_manual(values = c("Functional" = "green", "Non-Functional, dry season" = "blue", "Non-Functional" = "orange")) +
  geom_sf(data = filtered_subdist_camps, fill = "transparent", color = "yellow") +
  scale_fill_discrete(name = district_name) +
    labs(
      color = "Water point Status",
      title = paste(district_name, "Sub-district")) +
    theme_minimal()

}

Palong_Khali <- subdistrict_plots("Palong Khali")
Whykong <- subdistrict_plots("Whykong")
Nhilla <- subdistrict_plots("Nhilla")
Teknaf <- subdistrict_plots("Teknaf")

Palong_Khali
Whykong
Teknaf
Nhilla
```